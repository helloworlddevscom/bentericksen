//describe('planData Store Module', () => {
//  it('calculates the correct value for the computed cells (plan 100)', () => {
//    const localVue = createLocalVue();
//    localVue.use(Vuex);
//    const store = new Vuex.Store(cloneDeep(storeConfig100));
//
//    employeesAndFunds.actions.setActiveEmployee({ commit: store.commit, rootState: plan100 }, 101);
//    planData.actions.runCalculations({ commit: store.commit, dispatch: store.dispatch, state: plan100.planData });
//
//    const activeMonths = planData.getters.activeMonths(store.state.planData, {}, plan100);
//    expect(activeMonths.length).toBe(6);
//    expect(activeMonths[0].month).toBe(1);
//    expect(activeMonths[5].month).toBe(6);
//    // the month's moving average - based on 6-month average for this plan, only the last month should have a non-zero value
//    // TODO: unable to test this because I can't figure out how to pass rootState through runCalculations() to calculateProductionCollectionAverage() - KD
//    // TODO: revisit this in BP2-47
//    // expect(activeMonths[0].productionCollectionAverage).toBe(0);
//    // expect(activeMonths[4].productionCollectionAverage).toBe(0);
//    // expect(activeMonths[5].productionCollectionAverage).toBe(9833);
//
//    // PLAN DATA TABLE
//
//    const netProductionAverage = planData.getters.netProductionAverage(plan100.planData, { activeMonths }, plan100);
//    expect(netProductionAverage).toBeCloseTo(9833, 0);
//
//    const netCollectionAverage = planData.getters.netCollectionAverage(plan100.planData, { activeMonths }, plan100);
//    expect(netCollectionAverage).toBeCloseTo(8833, 0);
//
//    // FIXME: this will fail until fixed in BP2-47
//    // const productionCollectionAverage = planData.getters.productionCollectionAverage(plan100.planData, { activeMonths }, plan100);
//    // expect(productionCollectionAverage).toBeCloseTo(9400, 0);
//
//    const collectionRatioAverage = planData.getters.collectionRatioAverage(plan100.planData, { netProductionAverage, netCollectionAverage }, plan100);
//    expect(collectionRatioAverage).toBeCloseTo(89.8, 1);
//
//    const hygieneProductionAverage = planData.getters.hygieneProductionAverage(plan100.planData, { activeMonths }, plan100);
//    expect(hygieneProductionAverage).toBeCloseTo(0, 0); // no hygiene plan here - so always zero
//
//    const productionAverage = planData.getters.productionAverage(plan100.planData, { activeMonths }, plan100);
//    expect(productionAverage).toBeCloseTo(0, 0); // no hygiene plan here - so always zero
//  });
//
//  it('calculates the correct value for the computed cells (plan 200)', () => {
//    const localVue = createLocalVue();
//    localVue.use(Vuex);
//    const store = new Vuex.Store(cloneDeep(storeConfig200));
//
//    employeesAndFunds.actions.setActiveEmployee({ commit: store.commit, rootState: plan200 }, 101);
//    planData.actions.runCalculations({ commit: store.commit, dispatch: store.dispatch, state: plan200.planData });
//
//    const activeMonths = planData.getters.activeMonths(store.state.planData, {}, plan200);
//    expect(activeMonths.length).toBe(6);
//    expect(activeMonths[0].month).toBe(2);
//    expect(activeMonths[5].month).toBe(7);
//
//    // PLAN DATA TABLE
//
//    const netProductionAverage = planData.getters.netProductionAverage(plan200.planData, { activeMonths }, plan200);
//    expect(netProductionAverage).toBeCloseTo(100000, 0);
//
//    const netCollectionAverage = planData.getters.netCollectionAverage(plan200.planData, { activeMonths }, plan200);
//    expect(netCollectionAverage).toBeCloseTo(100000, 0);
//
//    // FIXME: this will fail until fixed in BP2-47
//    // const productionCollectionAverage = planData.getters.productionCollectionAverage(plan200.planData, { activeMonths }, plan200);
//    // expect(productionCollectionAverage).toBeCloseTo(100000, 0);
//
//    const collectionRatioAverage = planData.getters.collectionRatioAverage(plan200.planData, { netProductionAverage, netCollectionAverage }, plan200);
//    expect(collectionRatioAverage).toBeCloseTo(100.0, 1);
//
//    const hygieneProductionAverage = planData.getters.hygieneProductionAverage(plan200.planData, { activeMonths }, plan200);
//    expect(hygieneProductionAverage).toBeCloseTo(0, 0); // no hygiene plan here - so always zero
//
//    const productionAverage = planData.getters.productionAverage(plan200.planData, { activeMonths }, plan200);
//    // expect(productionAverage).toBeCloseTo(0, 0);  // TODO: this will fail until fixed in BP2-47
//  });
//});