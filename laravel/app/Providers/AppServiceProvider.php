<?php

namespace App\Providers;

use App\Classification;
use App\ClassificationUpdates;
use App\DriversLicense;
use App\EmergencyContact;
use App\Salary;
use App\User;
use App\Business;
use App\BusinessPermission;
use App\Observers\StreamdentBusinessObserver;
use App\Observers\StreamdentUserObserver;
use App\Observers\StreamdentBusinessPermissionObserver;

use Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider;
use Illuminate\Support\Facades\Blade;
use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Schema;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        // If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release,
        // you may need to manually configure the default string length generated by migrations in order for MySQL to
        // create indexes for them.
        Schema::defaultStringLength(191);

        // Streamdent business observer
        Business::observe(StreamdentBusinessObserver::class);

        User::observe(StreamdentUserObserver::class);

        // Observing events for creating history log entries.
        BusinessPermission::observe(StreamdentBusinessPermissionObserver::class);

        User::updating(function ($user) {

            // ignoring history logs for admin users
            if ($user->business_id == 0) {
                return;
            }

            $updatedAttributes = $this->_getUpdatedAttributes($user);

            if ($user->isDirty()) {
                $user->createHistoryLog('Status', $updatedAttributes);
            }
        });

        // Salary
        Salary::updating(function ($salary) {
            if ($salary->isDirty()) {
                $user = User::find($salary->user_id);
                $user->createHistoryLog('Salary', $this->_getUpdatedAttributes($salary));
            }
        });

        // Driver's License
        DriversLicense::updating(function ($driversLicense) {
            if ($driversLicense->isDirty()) {
                $user = User::find($driversLicense->user_id);
                $user->createHistoryLog('Driver\'s License', $this->_getUpdatedAttributes($driversLicense));
            }
        });

        // Emergency Contacts
        EmergencyContact::updating(function ($contact) {
            if ($contact->isDirty()) {
                $user = User::find($contact->user_id);
                $user->createHistoryLog('Emergency Contact', $this->_getUpdatedAttributes($contact));
            }
        });
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        if ($this->app->environment() !== 'production') {
            $this->app->register(IdeHelperServiceProvider::class);
        }
    }

    /**
     * Bulding array with updated attributes on current entity.
     *
     * @param $entity
     *
     * @return array
     */
    private function _getUpdatedAttributes($entity)
    {
        $ignore = [
            'last_login' => true,
            'remember_token' => true,
        ];

        $updatedAttributes = [];

        foreach ($entity->getDirty() as $attr => $value) {
            if (isset($ignore[$attr]) && $ignore[$attr] === true) {
                continue;
            }

            $current = $entity->getRawOriginal($attr);

            if (empty($current) || empty($value)) {
                return $updatedAttributes;
            }


            // For classification updates we replace the classification ids with the classification names
            // and effective date for more readable history log entries
            if ($attr === "classification_id") {

                $updatedAttributes[] = [
                    'attr' => 'Classification',
                    'current' => Classification::where('id', $current)->first()->name,
                    'new' => sprintf(
                        "%s - effective %s",
                        Classification::where('id', $value)->first()->name,
                        ClassificationUpdates::where('classification_id', $value)->latest()->first()->effective_at
                    )
                ];

            } else {

                $updatedAttributes[] = ['attr' => $attr, 'current' => $current, 'new' => $value];

            }
        }

        return $updatedAttributes;
    }
}
